Write a Python program to sort a list of elements using the merge sort algorithm.

CODE:
b=int(input())

a=input().split(" ")
a .sort()
for i in range(b):
 print(int(a[i]),end=" ")



















Input Format
The first line contains an integer,n , the size of the list a .
The second line contains  n,  space-separated integers a[i].
Constraints
·         2<=n<=600
·         1<=a[i]<=2x106.
Output Format
You must print the following three lines of output:
1.      List is sorted in numSwaps swaps., where numSwaps is the number of swaps that took place.
2.      First Element: firstElement, the  first element in the sorted list.
3.      Last Element: lastElement, the last element in the sorted list.

Sample Input 0
3
1 2 3
Sample Output 0
List is sorted in 0 swaps.
First Element: 1
Last Element: 3

For example:
Input
Result
3
3 2 1
List is sorted in 3 swaps.
First Element: 1
Last Element: 3
5
1 9 2 8 4
List is sorted in 4 swaps.
First Element: 1
Last Element: 9


Ex. No. 	: 	10.2 				Date:
Register No.: 					Name:


Bubble Sort
Given an listof integers, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following three lines:
1.      List is sorted in numSwaps swaps., where numSwaps is the number of swaps that took place.
2.      First Element: firstElement, the  first element in the sorted list.
3.      Last Element: lastElement, the last element in the sorted list.
For example, given a worst-case but small array to sort: a=[6,4,1]. It took  3 swaps to sort the array. Output would be
Array is sorted in 3 swaps.  
First Element: 1  
Last Element: 6   

CODE:

def bubble_sort(arr):
    n = len(arr)
    num_swaps = 0
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                num_swaps += 1
    
    print("List is sorted in {} swaps.".format(num_swaps))
    print("First Element:", arr[0])
    print("Last Element:", arr[-1])

def main():
    n = int(input())
    arr = list(map(int, input().split()))
    bubble_sort(arr)

main()
















Input Format
The first line contains a single integer n , the length of A .
The second line contains n space-separated integers,A[i].

Output Format
Print peak numbers separated by space.

Sample Input
5
8 9 10 2 6
Sample Output
10 6



For example:
Input
Result
4
12 3 6 8 
12 8






Ex. No. 	: 	10.3 				Date:
Register No.: 					Name:


Peak Element
Given an list, find peak element in it. A peak element is an element that is greater than its neighbors.
An element a[i] is a peak element if
A[i-1] <= A[i] >=a[i+1] for middle elements. [0<i<n-1]
A[i-1] <= A[i] for last element [i=n-1]
A[i]>=A[i+1] for first element [i=0]

CODE:
def find_peak(arr):
    peak_elements = []
    n = len(arr)
    
    if n == 1:
        return arr[0]

    if arr[0] >= arr[1]:
        peak_elements.append(arr[0])

    for i in range(1, n - 1):
        if arr[i - 1] <= arr[i] and arr[i] >= arr[i + 1]:
            peak_elements.append(arr[i])

    if arr[n - 1] >= arr[n - 2]:
        peak_elements.append(arr[n - 1])

    return peak_elements

n = int(input())
arr = list(map(int, input().split()))
peaks = find_peak(arr)
print(*peaks)


For example:
Input
Result
1 2 3 5 8
6
False
3 5 9 45 42
42
True







Ex. No. 	: 	10.4 				Date:
Register No.: 					Name:


Binary Search
Write a Python program for binary search.
CODE:

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return False

arr = list(map(int, input().split()))
target = int(input())

result = binary_search(arr, target)
print(result)


















Input: 
1 68 79 4 90 68 1 4 5 
output:
 1 2
 4 2
 5 1
 68 2
 79 1 
90 1



For example:
Input
Result
4 3 5 3 4 5
3 2
4 2
5 2




Ex. No. 	: 	10.5 				Date:
Register No.: 					Name:


Frequency of Elements
To find the frequency of numbers in a list and display in sorted order.
Constraints: 
1<=n, arr[i]<=100 
CODE:
a=input().split()
a.sort()
l=[]
b=[]
for i in range(len(a)):
 b .append(int(a[i]))
b.sort()
#print(b)
for i in range(len(b)):
 count=0
 for j in range(len(b)):
  if int(b[i]) not in l:
   if int(b[i])==int(b[j]):
    count+=1
 l.append(int(b[i]))
 if count!=0:
  print(int(b[i]),count)
