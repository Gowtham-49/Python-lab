Balanced Array
Given an array of numbers, find the index of the smallest array element (the pivot), for which the sums of all elements to the left and to the right are equal. The array may not be reordered.
Example
arr=[1,2,3,4,6]
·         the sum of the first three elements, 1+2+3=6. The value of the last element is 6.
·         Using zero based indexing, arr[3]=4 is the pivot between the two subarrays.
·         The index of the pivot is 3.
Constraints
·         3 ≤ n ≤ 105
·         1 ≤ arr[i] ≤ 2 × 104, where 0 ≤ i < n
·         It is guaranteed that a solution always exists.
The first line contains an integer n, the size of the array arr.
Each of the next n lines contains an integer, arr[i], where 0 ≤ i < n.



n = int(input())
arr = []
for i in range(n):
    arr.append(int(input()))

for i in range(len(arr)):
    if sum(arr[:i]) == sum(arr[i + 1:]):
        pivot = i
        break

print(pivot)

Input
1
3 
1 
3 
5
4
Output:
1
Input
1
3 
1 
3 
5
99
Output
0



For example:
Input
Result
1
3 
1 
3 
5
4


1
1
3 
1 
3 
5
99


0




Ex. No. 	: 	5.2 				Date:
Register No.: 					Name:


Check pair with difference k
Given an array A of sorted integers and another non negative integer k, find if there exists 2 indices i and j such that A[i] - A[j] = k, i != j.
Input Format
1.      First line is number of test cases T. Following T lines contain:
2.      N, followed by N integers of the array
3.      The non-negative integer k
Output format
Print 1 if such a pair exists and 0 if it doesn’t.


CODE:
T=int(input())
while(T):
    flag=False
    n=int(input())
    L=[]
    while(n):
        L.append(int(input()))
        n-=1
    k=int(input())
    for i in range(0,len(L)):
        for j in range(0,len(L)):
            if(not(i==j) and (L[i]-L[j]==k)):
                flag=True
                break
        if(flag):
            break
    if(flag):
        print(1)
    else:
        print(0)
    T=T-1

Sample Test Cases
 Test Case 1
 Input
 7
23
45
23
56
45
23
40
 Output
 23 occurs 3 times
45 occurs 2 times
56 occurs 1 times
40 occurs 1 times

Ex. No. 	: 	5.3 				Date:
Register No.: 					Name:


Count Elements
Complete the program to count frequency of each element of an array. Frequency of a particular element will be printed once.
CODE: 
numbers = []
n = int(input())
for _ in range(n):
    num = int(input())
    numbers.append(num)

frequency = {}
for number in numbers:
    if number in frequency:
        frequency[number] += 1
    else:
        frequency[number] = 1

for number, count in frequency.items():
    print(f"{number} occurs {count} times")







Example Input:
5
1 
2 
2 
3 
4
Output:
1 2 3 4
Example Input:
6
1 
1 
2 
2 
3 
3
Output:
1 2 3


For example:
Input	Result
5
1 
2 
2 
3
4
1 2 3 4 
6
1 
1 
2 
2 
3 
3
1 2 3

Ex. No. 	: 	5.4 				Date:
Register No.: 					Name:


Distinct Elements in an Array
Program to print all the distinct elements in an array. Distinct elements are nothing but the unique (non-duplicate) elements present in the given array.
Input Format:
First line take an Integer input from stdin which is array length n.
Second line take n Integers which is inputs of array.
Output Format:
Print the Distinct Elements in Array in single line which is space Separated

n=int(input())
x=[]
for i in range(0,n):
    a=int(input())
    x.append(a)
p=list(set(x))
P=' '.join(str(i) for i in p)
print(P) 



Sample Test Cases
Test Case 1
Input
1
3
4
5
6
7
8
9
10
11
2


Output
ITEM to be inserted:2
After insertion array is:
1
2
3
4
5
6
7
8
9
10
11
 




Test Case 2
Input
11
22
33
55
66
77
88
99
110
120
44
 
Output
 
ITEM to be inserted:44
After insertion array is:
11
22
33
44
55
66
77
88
99
110

CODE:



Ex. No. 	: 	5.5 				Date:
Register No.: 					Name:


Element Insertion
Consider a program to insert an element / item in the sorted array. Complete the logic by filling up required code in editable section. Consider an array of size 10. The eleventh item is the data is to be inserted.


CODE:

l=[]
for i in range(0,10):
 z=int(input())
 l.append(z)
p=int(input()) 
l.append(p)
l.sort()
print("ITEM to be inserted:",p,sep='')
print("After insertion array is:")

for i in range(11):
 print(l[i],end="")
 print('')
    
 



Sample Case 0
Sample Input 0
10
3
Sample Output 0
5
Explanation 0
Factoring n = 10 results in {1, 2, 5, 10}. Return the p = 3rd factor, 5, as the answer.
Sample Case 1
Sample Input 1
10
5
Sample Output 1
0
Explanation 1
Factoring n = 10 results in {1, 2, 5, 10}. There are only 4 factors and p = 5, therefore 0 is returned as the answer.
Sample Case 2
Sample Input 2
1
1
Sample Output 2
1
Explanation 2
Factoring n = 1 results in {1}. The p = 1st factor of 1 is returned as the answer.



For example:
Input
Result
10
3
5
10
5
0
1
1
1




Ex. No. 	: 	5.6 				Date:
Register No.: 					Name:


Find the Factor
Determine the factors of a number (i.e., all positive integer values that evenly divide into a number) and then return the pth element of the list, sorted ascending. If there is no pth element, return 0.
Constraints
1 ≤ n ≤ 1015
1 ≤ p ≤ 109
The first line contains an integer n, the number to factor.
The second line contains an integer p, the 1-based index of the factor to return.
CODE:
n=int(input())
p=int(input())
l=[]
s=0
for i in range(1,n+1):
    if(n%i==0):
        l.append(i)
        s=s+1;
if(p<s):
    print(l[p-1])
elif(p>s):
    print("0")
else:
    print(p)

Sample test case


Sample input
2
2
1 
3
5
7
2
4
6
8


Sample Output


[[1, 3, 2, 4], [5, 7, 6, 8]]



Ex. No. 	: 	5.7 				Date:
Register No.: 					Name:


Merge List
Write a Python program to Zip two given lists of lists.


Input:
m : row size
n: column size
list1 and list 2 :  Two lists
Output
Zipped List : List which combined both list1 and list2


CODE:
a=int(input())
b=int(input())
l=[]
m=[]
z=[]

for i in range(a):
 q=int(input())
 l.append(q)
for y in range(a):
 q=int(input())
 m.append(q)
for i in range(a):
 q=int(input())
 l.append(q)
for y in range(a):
 q=int(input())
 m.append(q)
z.append(l)
z.append(m)
print(z)

 
Sample Input 1


5
1 
2 
3 
6 
9
4
2 
4 
5 
10


Sample Output 1


1 2 3 4 5 6 9 10

Ex. No. 	: 	5.8 				Date:
Register No.: 					Name:


Merge Two Sorted Arrays Without Duplication
Output is a merged array without duplicates.
Input Format
N1 - no of elements in array 1
Array elements for array 1
N2 - no of elements in array 2
Array elements for array2
Output Format
Display the merged array


CODE:
a=int(input())
l=[]
z=0
count=0
for i in range(a):
 p=int(input())
 l. append(p)
b=int(input())
for i in range(len(l)):
 if l[i]==b:
  print(f"{b} is present at location {i+1}.")
  z=+1
  count+=1
 
  
if count>0:
 print(f"{b} is present {count} times in the array.")
if z==0:
 print(f"{b} is not present in the array.")



For example, if there are 4 elements in the array:
5
6
5
7


If the element to search is 5 then the output will be:
5 is present at location 1
5 is present at location 3
5 is present 2 times in the array.
Sample Test Cases


Test Case 1
Input


4
5
6
5
7
5


Output


5 is present at location 1.
5 is present at location 3.
5 is present 2 times in the array.
 
Test Case 2
 Input
5
67
80
45
97
100
50


Output
50 is not present in the array.

Ex. No. 	: 	5.9 				Date:
Register No.: 					Name:


Print Element Location
Write a program to print all the locations at which a particular element (taken as input) is found in a list and also print the total number of times it occurs in the list. The location starts from 1.


 


CODE:


n=int(input())
element=[]
while(n):
    element.append(int(input()))
    n-=1
search=int(input())
l=len(element)
c=0


for i in range(l):
    if(element[i]==search ):
        print(f'{search} is present at location {i+1}.')
        c=c+1
    else: 
        continue
if(c==0):
    print(f'{search} is not present in the array.')
else:
    print(f'{search} is present {c} times in the array.')








Sample Test Case


Input


7


1


2


3


0


4


5


6


Output 


True



Ex. No. 	: 	5.10 				Date:
Register No.: 					Name:


Strictly increasing
Write a Python program to check if a given list is strictly increasing or not. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true
Input:
n : Number of elements
List1: List of values
Output
Print "True" if list is strictly increasing or decreasing else print "False"



CODE:
def is_strictly_increasing(lst):
    increasing = all(lst[i] < lst[i+1] for i in range(len(lst)-1))
    if increasing:
        return True
    decreasing = all(lst[i] > lst[i+1] for i in range(len(lst)-1))
    if decreasing:
        return True
    
    for i in range(len(lst)):
        temp_lst = lst[:i] + lst[i+1:]
        if all(temp_lst[j] < temp_lst[j+1] for j in range(len(temp_lst)-1)):
            return True
    return False

n = int(input())
lst = []
for i in range(n):
    lst.append(int(input()))

result = is_strictly_increasing(lst)
print(result)

